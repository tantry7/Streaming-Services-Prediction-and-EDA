# -*- coding: utf-8 -*-
"""Amazonprime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-R5F_LHdJzgmp0b_DebhCBWVBZXdpOd
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, AffinityPropagation
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
import plotly as py
import plotly.graph_objs as go
import os 
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MultiLabelBinarizer
import matplotlib.colors

amazon_data = pd.read_csv("/content/drive/MyDrive/Datasets-Streaming/amazon_prime_titles.csv")
amazon_data.head()

for col in amazon_data.columns:
    null_rate = amazon_data[col].isna().sum() / np.shape(amazon_data)[0] * 100 
    if null_rate > 0 :
        print("{} null rate: {}%".format(col,round(null_rate,2)))

amazon_data['country'] = amazon_data['country'].fillna(amazon_data['country'].mode()[0])
amazon_data['cast'] = amazon_data['cast'].fillna("No data")
amazon_data['director'] = amazon_data['director'].fillna("No Data")
amazon_data['date_added'] = amazon_data['date_added'].fillna("No Data")
amazon_data["rating"] = amazon_data["rating"].fillna("No Data")
amazon_data.dropna(how = "all",inplace=True)
amazon_data.drop_duplicates( inplace=True)
amazon_data.isnull().sum()

sns.palplot(['#007eb9','#232f3e','#ffffff'])
plt.title("Amazon Brand pallete", loc = "left",fontfamily="serif",fontsize=15,y=1.2)
plt.show()

amazon_data.columns.unique()

"""Amazon Movie and show ratio

"""

x = pd.DataFrame(amazon_data.groupby('type')['type'].count())
x.head()

import plotly.express as px

fig = px.pie(x,values='type',names=x.index,width=600,height=600)
fig.update_traces(textposition = "inside",textinfo = 'percent+label',hole=0.8,marker = dict(colors=['#007eb9','#232f3e'],line=dict(color="white",width=2)))
fig.show()

amazon_data['count'] =1
amazon_data['first_country'] = amazon_data['country'].apply(lambda x:x.split(",")[0])
amazon_data['first_country'].head()

data = amazon_data.groupby('first_country')['count'].sum().sort_values(ascending=False)[:10]

data = pd.DataFrame(data)

data.head()

"""Top 5 countries

"""

data = amazon_data.groupby('first_country')['count'].sum().sort_values(ascending=False)[:5]
color_map = ['#f5f5f1' for _ in range(5)]
color_map[0] = color_map[1] = color_map[2] = "#007eb9"
fig, ax = plt.subplots(1,1,figsize=(12,6))
ax.bar(data.index,data,width=0.5,edgecolor="darkgray",linewidth=0.6,color=color_map)
for i in data.index:
  ax.annotate(f"{data[i]}",
              xy=(i,data[i]+150),
              va = "center",ha="center",fontweight="light",fontfamily="serif")
  
for s in ['top','left','right']:
  ax.spines[s].set_visible(False)

ax.set_xticklabels(data.index, fontfamily = 'serif', rotation=0)
fig.text(0.09,1,'Top 5 countries on Amazon Prime',fontsize = 15, fontweight = "bold",fontfamily="serif")
fig.text(0.09,0.95,"The three most frequent countries have been highlited.")
grid_y_ticks = np.arange(0,10000,1000)
ax.set_yticks(grid_y_ticks)
ax.set_axisbelow(True)
plt.axhline(y=0,color="black",linewidth=1.3,alpha=0.7)
ax.tick_params(axis="both",which="major",labelsize=12)
import matplotlib.lines as lines 
l1 = lines.Line2D([1,1],[0,1],transform=fig.transFigure,figure=fig,color='black',lw=0.2)
fig.lines.extend([l1])
plt.show()

country_order = amazon_data['first_country'].value_counts()[:5].index
data_q2q3 = amazon_data[['type', 'first_country']].groupby('first_country')['type'].value_counts().unstack().loc[country_order]

data_q2q3['sum'] = data_q2q3.sum(axis=1)

data_q2q3_ratio =(data_q2q3.T / data_q2q3['sum']).T[['Movie', 'TV Show']].sort_values(by='Movie',ascending=False)[::-1]

data_q2q3_ratio

ax.barh(data_q2q3_ratio.index, data_q2q3_ratio['Movie'], 
        color='#007eb9', alpha=0.8, label='Movie')
ax.barh(data_q2q3_ratio.index, data_q2q3_ratio['TV Show'], left=data_q2q3_ratio['Movie'], 
        color='#232f3e', alpha=0.8, label='TV Show')


ax.set_xlim(0, 1)
ax.set_xticks([])
ax.set_yticklabels(data_q2q3_ratio.index, fontfamily='serif', fontsize=11)

# male percentage
for i in data_q2q3_ratio.index:
    ax.annotate(f"{data_q2q3_ratio['Movie'][i]*100:.3}%", 
                   xy=(data_q2q3_ratio['Movie'][i]/2, i),
                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',
                   color='white')

for i in data_q2q3_ratio.index:
    ax.annotate(f"{data_q2q3_ratio['TV Show'][i]*100:.3}%", 
                   xy=(data_q2q3_ratio['Movie'][i]+data_q2q3_ratio['TV Show'][i]/2, i),
                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',
                   color='white')
    

fig.text(0.13, 0.93, 'Top 5 countries Movie & TV Show split', fontsize=15, fontweight='bold', fontfamily='serif')   
fig.text(0.131, 0.89, 'Percent Stacked Bar Chart', fontsize=12,fontfamily='serif')



import matplotlib.lines as lines
l1 = lines.Line2D([1, 1], [0, 1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)
fig.lines.extend([l1])




ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis=u'both', which=u'both',length=0)
plt.show()

country_order = amazon_data['first_country'].value_counts()[:5].index
data_q2q3 = amazon_data[['type', 'first_country']].groupby('first_country')['type'].value_counts().unstack().loc[country_order]
data_q2q3['sum'] = data_q2q3.sum(axis=1)
data_q2q3_ratio = (data_q2q3.T / data_q2q3['sum']).T[['Movie', 'TV Show']].sort_values(by='Movie',ascending=False)[::-1]
fig, ax = plt.subplots(1,1,figsize=(15, 8),)

ax.barh(data_q2q3_ratio.index, data_q2q3_ratio['Movie'], 
        color='#007eb9', alpha=0.8, label='Movie')
ax.barh(data_q2q3_ratio.index, data_q2q3_ratio['TV Show'], left=data_q2q3_ratio['Movie'], 
        color='#221f1f', alpha=0.8, label='TV Show')


ax.set_xlim(0, 1)
ax.set_xticks([])
ax.set_yticklabels(data_q2q3_ratio.index, fontfamily='serif', fontsize=11)

# male percentage
for i in data_q2q3_ratio.index:
    ax.annotate(f"{data_q2q3_ratio['Movie'][i]*100:.3}%", 
                   xy=(data_q2q3_ratio['Movie'][i]/2, i),
                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',
                   color='white')

for i in data_q2q3_ratio.index:
    ax.annotate(f"{data_q2q3_ratio['TV Show'][i]*100:.3}%", 
                   xy=(data_q2q3_ratio['Movie'][i]+data_q2q3_ratio['TV Show'][i]/2, i),
                   va = 'center', ha='center',fontsize=12, fontweight='light', fontfamily='serif',
                   color='white')
    

fig.text(0.13, 0.93, 'Top 5 countries Movie & TV Show split', fontsize=15, fontweight='bold', fontfamily='serif')   
fig.text(0.131, 0.89, 'Percent Stacked Bar Chart', fontsize=12,fontfamily='serif')   

for s in ['top', 'left', 'right', 'bottom']:
    ax.spines[s].set_visible(False)
    

fig.text(0.75,0.9,"Movie", fontweight="bold", fontfamily='serif', fontsize=15, color='#007eb9')
fig.text(0.81,0.9,"|", fontweight="bold", fontfamily='serif', fontsize=15, color='black')
fig.text(0.82,0.9,"TV Show", fontweight="bold", fontfamily='serif', fontsize=15, color='#221f1f')





import matplotlib.lines as lines
l1 = lines.Line2D([1, 1], [0, 1], transform=fig.transFigure, figure=fig,color='black',lw=0.2)
fig.lines.extend([l1])




ax.tick_params(axis='both', which='major', labelsize=12)
ax.tick_params(axis=u'both', which=u'both',length=0)

plt.show()

order = pd.DataFrame(amazon_data.groupby('rating')['count'].sum().sort_values(ascending=False).reset_index())
rating_order = list(order['rating'])

fig, ax = plt.subplots(1, 1, figsize=(12, 6))
color = ['#007eb9','#232f3e']

for i, mtv in enumerate(amazon_data['type'].value_counts().index):
    mtv_rel = amazon_data[amazon_data['type']==mtv]['release_year'].value_counts().sort_index()
    ax.plot(mtv_rel.index, mtv_rel, color=color[i], label=mtv)
    ax.fill_between(mtv_rel.index, 0, mtv_rel, color=color[i], alpha=0.9)
    
ax.yaxis.tick_right()
    
ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)

#ax.set_ylim(0, 50)
#ax.legend(loc='upper left')
for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

ax.grid(False)

ax.set_xlim(2008,2020)
plt.xticks(np.arange(2000, 2021, 1))


fig.text(0.13,0.8,"Movie", fontweight="bold", fontfamily='serif', fontsize=15, color='#007eb9')
fig.text(0.19,0.8,"|", fontweight="bold", fontfamily='serif', fontsize=15, color='black')
fig.text(0.2,0.8,"TV Show", fontweight="bold", fontfamily='serif', fontsize=15, color='#232f3e')

ax.tick_params(axis=u'both', which=u'both',length=0)

plt.show()

from sklearn.preprocessing import MultiLabelBinarizer 

import matplotlib.colors
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("",['#007eb9','#232f3e'])
def genre_heatmap(df, title):
    df['genre'] = df['listed_in'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) 
    Types = []
    for i in df['genre']: Types += i
    Types = set(Types)
    print("There are {} types in the amazon {} Dataset".format(len(Types),title))    
    test = df['genre']
    mlb = MultiLabelBinarizer()
    res = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_, index=test.index)
    corr = res.corr()
    mask = np.zeros_like(corr, dtype=np.bool)
    mask[np.triu_indices_from(mask)] = True
    fig, ax = plt.subplots(figsize=(10, 7))

    pl = sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, vmin=-.3, center=0, square=True, linewidths=2.5)
    plt.show()

df_tv = amazon_data[amazon_data["type"]==" TV show"]
df_movies = amazon_data[amazon_data["type"]=="Movie"]
genre_heatmap(df_movies,"Movie")
plt.show()



from wordcloud import WordCloud
import random
from PIL import Image
import matplotlib

cmap = matplotlib.colors.LinearSegmentedColormap.from_list("",['#007eb9','#232f3e'])
text = str(list(amazon_data['title'])).replace(' ','').replace('[', '').replace("'", '').replace(']', '').replace('.', '').replace('4KUHD',"").replace("Tamil","").replace("Telugu","").replace("Hindi","").replace("Kannada","").replace("Subtitled","").replace("Malayalam","").replace("English","")
mask = np.array(Image.open('/content/drive/MyDrive/Datasets-Streaming/download (1).png'))
wordcloud = WordCloud(background_color= "white",width = 500,  height = 200,colormap=cmap, max_words = 150, mask = mask).generate(text)

plt.figure( figsize=(5,5))
plt.imshow(wordcloud, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.show()

from sklearn.feature_extraction.text import TfidfVectorizer
#removing stopwords
tfidf = TfidfVectorizer(stop_words='english')

#Replace NaN with an empty string
amazon_data['description'] = amazon_data['description'].fillna('')

#Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(amazon_data['description'])

#Output the shape of tfidf_matrix
tfidf_matrix.shape

from sklearn.metrics.pairwise import linear_kernel
cosine_sim = linear_kernel(tfidf_matrix,tfidf_matrix)
indicies = pd.Series(amazon_data.index,index= amazon_data['title']).drop_duplicates()



indicies['Pink: Staying True']

from numpy.core.numeric import indices
def get_recomendations(title,cosine_sim = cosine_sim):
  idx = indicies[title]
  sim_scores = list(enumerate(cosine_sim[idx]))
  sim_scores = sorted(sim_scores,key = lambda x:x[1],reverse=True)
  sim_scores = sim_scores[1:11]
  movie_indicies = [i[0] for i in sim_scores]
  return amazon_data['title'].iloc[movie_indicies]

s = get_recomendations('Pink: Staying True')
 s = pd.DataFrame(s)

s

books=pd.read_csv('/content/drive/MyDrive/Datasets-Streaming/netflix_data/books.csv')
books['original_title']=books['original_title'].str.lower()
x=amazon_data
x['title']=x['title'].str.lower()
t=x.merge(books, left_on='title', right_on='original_title', how="inner")

t

import plotly.graph_objects as go

labels = ['Shows from books','Shows not from books']
values = [285
          ,6234]

fig = go.Figure(data=[go.Pie(labels=labels, values=values)])
fig.show()

